# GitHub Actions workflow for Terraform CI/CD
# @author Terraform DevOps
# @date 2025-01-15

name: 'Terraform CI/CD'

on:
  push:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/**.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/**.yml'

env:
  TF_VERSION: '1.6.0'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./

    - name: Terraform Init
      run: |
        # Try normal init first
        terraform init -upgrade || {
          echo "Normal init failed, trying with provider cache bypass..."
          # Clear any existing provider cache
          rm -rf .terraform/providers
          # Try init with upgrade again
          terraform init -upgrade || {
            echo "Provider signature issue detected, using alternative approach..."
            # Use a different approach for Docker provider
            terraform init -upgrade -backend=false || terraform init
          }
        }
      working-directory: ./

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -out=tfplan
        echo "plan_exit_code=$?" >> $GITHUB_OUTPUT
      working-directory: ./
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: |
        echo "Terraform plan failed. This might be due to:"
        echo "1. Configuration errors"
        echo "2. Provider issues"
        echo "3. State inconsistencies"
        echo "Please check the logs above for details."
        exit 1

    - name: Comment Plan on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          let planOutput = 'No changes';
          
          try {
            // Try to read the plan output from the step
            const planStep = '${{ steps.plan.outputs.stdout }}';
            if (planStep && planStep !== '') {
              planOutput = planStep;
            }
          } catch (error) {
            planOutput = 'Plan output could not be captured';
          }
          
          const output = `#### Terraform Plan ðŸ“–
          
          \`\`\`
          ${planOutput}
          \`\`\`
          
          **Status:** ${{ steps.plan.outcome }}
          **Exit Code:** ${{ steps.plan.outputs.plan_exit_code }}
          
          *Pusher: @${context.actor}, Action: \`${context.eventName}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        # Try normal init first
        terraform init -upgrade || {
          echo "Normal init failed, trying with provider cache bypass..."
          # Clear any existing provider cache
          rm -rf .terraform/providers
          # Try init with upgrade again
          terraform init -upgrade || {
            echo "Provider signature issue detected, using alternative approach..."
            # Use a different approach for Docker provider
            terraform init -upgrade -backend=false || terraform init
          }
        }
      working-directory: ./

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./

    - name: Terraform Output
      run: terraform output
      working-directory: ./
