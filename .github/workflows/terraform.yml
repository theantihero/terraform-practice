# GitHub Actions workflow for Terraform CI/CD Pipeline
# @author Terraform DevOps
# @date 2025-01-15

name: 'Terraform CI/CD'

on:
  push:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/**.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/**.yml'

env:
  TF_VERSION: '1.13.4'
  TF_VAR_docker_host: 'unix:///var/run/docker.sock'

jobs:
  validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./

    - name: Terraform Init
      run: |
        echo "Initializing Terraform with provider signature handling..."
        terraform init -upgrade || {
          echo "Provider signature issue detected, trying alternative approach..."
          # Clear all terraform state and try again
          rm -rf .terraform
          terraform init || {
            echo "Still failing, trying with specific provider version..."
            # Force reinstall of specific provider version
            terraform init -upgrade -backend=false || terraform init
          }
        }
      working-directory: ./

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./

  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        echo "Initializing Terraform with provider signature handling..."
        terraform init -upgrade || {
          echo "Provider signature issue detected, trying alternative approach..."
          # Clear all terraform state and try again
          rm -rf .terraform
          terraform init || {
            echo "Still failing, trying with specific provider version..."
            # Force reinstall of specific provider version
            terraform init -upgrade -backend=false || terraform init
          }
        }
      working-directory: ./

    - name: Terraform Plan
      id: terraform-plan
      run: terraform plan -no-color
      working-directory: ./
      continue-on-error: true

    - name: Comment Plan on PR
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Plan üìñ
          
          **Status:** ${{ steps.terraform-plan.outcome }}
          
          \`\`\`
          ${{ steps.terraform-plan.outputs.stdout }}
          \`\`\`
          
          *Pusher: @${context.actor}, Action: \`${context.eventName}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: |
        echo "Initializing Terraform with provider signature handling..."
        terraform init -upgrade || {
          echo "Provider signature issue detected, trying alternative approach..."
          # Clear all terraform state and try again
          rm -rf .terraform
          terraform init || {
            echo "Still failing, trying with specific provider version..."
            # Force reinstall of specific provider version
            terraform init -upgrade -backend=false || terraform init
          }
        }
      working-directory: ./

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./

    - name: Terraform Output
      run: terraform output
      working-directory: ./

    - name: Notify Success
      run: |
        echo "‚úÖ Terraform apply completed successfully!"
        echo "üöÄ Observability stack is now deployed!"
        echo "üìä Grafana: http://localhost:3000"
        echo "üìà Prometheus: http://localhost:9090"
        echo "üìù Loki: http://localhost:3100"
